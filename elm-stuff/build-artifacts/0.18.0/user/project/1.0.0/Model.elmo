var _user$project$Model$generateTile = function (coord) {
	return _elm_lang$core$Native_Utils.eq(
		coord,
		{ctor: '_Tuple2', _0: 0, _1: 0}) ? A2(_user$project$Tile$newTile, coord, _user$project$Tile$Queen) : (_elm_lang$core$Native_Utils.eq(
		coord,
		{ctor: '_Tuple2', _0: 1, _1: 1}) ? A2(_user$project$Tile$newTile, coord, _user$project$Tile$Food) : A2(_user$project$Tile$newTile, coord, _user$project$Tile$Dirt));
};
var _user$project$Model$createKeyValuePair = F2(
	function (x, y) {
		return {
			ctor: '_Tuple2',
			_0: {ctor: '_Tuple2', _0: x, _1: y},
			_1: _user$project$Model$generateTile(
				{ctor: '_Tuple2', _0: x, _1: y})
		};
	});
var _user$project$Model$createPairList = F2(
	function (x, y) {
		return A2(
			_elm_lang$core$List$map,
			_user$project$Model$createKeyValuePair(x),
			A2(_elm_lang$core$List$range, 0 - y, y));
	});
var _user$project$Model$createGrid = F3(
	function ($var, $const, grid) {
		createGrid:
		while (true) {
			var newGrid = A2(
				_elm_lang$core$Dict$union,
				grid,
				_elm_lang$core$Dict$fromList(
					A2(_user$project$Model$createPairList, $var, $const)));
			if (_elm_lang$core$Native_Utils.cmp($var, 0 - $const) < 1) {
				return newGrid;
			} else {
				var _v0 = $var - 1,
					_v1 = $const,
					_v2 = newGrid;
				$var = _v0;
				$const = _v1;
				grid = _v2;
				continue createGrid;
			}
		}
	});
var _user$project$Model$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {state: a, grid: b, dimensions: c, mPosX: d, mPosY: e, screen: f, time: g, camera: h, resources: i, pressedKeys: j, selected: k, queen: l, ants: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Model$PostGame = {ctor: 'PostGame'};
var _user$project$Model$InGame = {ctor: 'InGame'};
var _user$project$Model$PreGame = {ctor: 'PreGame'};
var _user$project$Model$initialModel = function () {
	var grid = A3(_user$project$Model$createGrid, 12, 12, _elm_lang$core$Dict$empty);
	return {
		state: _user$project$Model$PreGame,
		grid: grid,
		dimensions: A2(_elm_lang$window$Window$Size, 0, 0),
		mPosX: 0,
		mPosY: 0,
		screen: {ctor: '_Tuple2', _0: 800, _1: 600},
		time: 0,
		camera: A2(
			_user$project$Game_TwoD_Camera$fixedArea,
			32 * 20,
			{ctor: '_Tuple2', _0: 0, _1: 0}),
		resources: _user$project$Game_Resources$init,
		pressedKeys: {ctor: '[]'},
		selected: _elm_lang$core$Maybe$Nothing,
		queen: A3(_user$project$Tile$getTile, grid, 0, 0),
		ants: _user$project$Ants$initialAnts
	};
}();
