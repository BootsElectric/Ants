var _user$project$Tile$getTile = F3(
	function (tiles, x, y) {
		var _p0 = A2(
			_elm_lang$core$Dict$get,
			{ctor: '_Tuple2', _0: x, _1: y},
			tiles);
		if (_p0.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(_p0._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Tile$digTile = function (tile) {
	var _p1 = tile;
	if (_p1.ctor === 'Just') {
		return _elm_lang$core$Maybe$Just(
			_elm_lang$core$Native_Utils.update(
				_p1._0,
				{isDug: true}));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Tile$updateKind = F2(
	function (tile, kind) {
		var _p2 = tile;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				_elm_lang$core$Native_Utils.update(
					_p2._0,
					{kind: kind}));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Tile$getKindAsString = function (tile) {
	var _p3 = tile;
	if (_p3.ctor === 'Just') {
		var _p5 = _p3._0;
		if (_elm_lang$core$Native_Utils.eq(_p5.isDug, false)) {
			return 'Dig to\nfind out';
		} else {
			var _p4 = _p5.kind;
			switch (_p4.ctor) {
				case 'Dirt':
					return 'Dirt';
				case 'Queen':
					return 'Queen';
				case 'Food':
					return 'Food';
				default:
					return 'Disaster';
			}
		}
	} else {
		return '';
	}
};
var _user$project$Tile$getFloat = function (t) {
	var _p6 = t;
	if (_p6.ctor === 'Just') {
		return _elm_lang$core$Maybe$Just(_p6._0.$float);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Tile$getY = function (t) {
	var _p7 = t;
	if (_p7.ctor === 'Just') {
		return _elm_lang$core$Maybe$Just(
			_elm_lang$core$Tuple$second(_p7._0.coord));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Tile$getX = function (t) {
	var _p8 = t;
	if (_p8.ctor === 'Just') {
		return _elm_lang$core$Maybe$Just(
			_elm_lang$core$Tuple$first(_p8._0.coord));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Tile$Tile = F5(
	function (a, b, c, d, e) {
		return {coord: a, kind: b, isDug: c, $float: d, indicator: e};
	});
var _user$project$Tile$Disaster = {ctor: 'Disaster'};
var _user$project$Tile$Food = {ctor: 'Food'};
var _user$project$Tile$Queen = {ctor: 'Queen'};
var _user$project$Tile$Dirt = {ctor: 'Dirt'};
var _user$project$Tile$getKind = function (tile) {
	var _p9 = tile;
	if (_p9.ctor === 'Just') {
		return _p9._0.kind;
	} else {
		return _user$project$Tile$Dirt;
	}
};
var _user$project$Tile$updateToDirt = function (tile) {
	var _p10 = tile;
	if (_p10.ctor === 'Just') {
		return _elm_lang$core$Maybe$Just(
			_elm_lang$core$Native_Utils.update(
				_p10._0,
				{kind: _user$project$Tile$Dirt}));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Tile$None = {ctor: 'None'};
var _user$project$Tile$newTile = F3(
	function (c, f, k) {
		return {coord: c, kind: k, isDug: false, $float: f, indicator: _user$project$Tile$None};
	});
var _user$project$Tile$DTFR = {ctor: 'DTFR'};
var _user$project$Tile$DTFL = {ctor: 'DTFL'};
var _user$project$Tile$DTFB = {ctor: 'DTFB'};
var _user$project$Tile$DRFT = {ctor: 'DRFT'};
var _user$project$Tile$DRFL = {ctor: 'DRFL'};
var _user$project$Tile$DRFB = {ctor: 'DRFB'};
var _user$project$Tile$DLFT = {ctor: 'DLFT'};
var _user$project$Tile$DLFR = {ctor: 'DLFR'};
var _user$project$Tile$DLFB = {ctor: 'DLFB'};
var _user$project$Tile$DBFT = {ctor: 'DBFT'};
var _user$project$Tile$DBFR = {ctor: 'DBFR'};
var _user$project$Tile$DBFL = {ctor: 'DBFL'};
var _user$project$Tile$FT = {ctor: 'FT'};
var _user$project$Tile$FR = {ctor: 'FR'};
var _user$project$Tile$FL = {ctor: 'FL'};
var _user$project$Tile$FB = {ctor: 'FB'};
var _user$project$Tile$DT = {ctor: 'DT'};
var _user$project$Tile$DR = {ctor: 'DR'};
var _user$project$Tile$DL = {ctor: 'DL'};
var _user$project$Tile$DB = {ctor: 'DB'};
var _user$project$Tile$BT = {ctor: 'BT'};
var _user$project$Tile$BR = {ctor: 'BR'};
var _user$project$Tile$BL = {ctor: 'BL'};
var _user$project$Tile$BB = {ctor: 'BB'};
