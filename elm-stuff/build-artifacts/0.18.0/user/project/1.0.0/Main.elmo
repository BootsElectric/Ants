var _user$project$Main$getTexturePaths = function (kind) {
	return {
		ctor: '::',
		_0: _elm_lang$core$String$concat(
			{
				ctor: '::',
				_0: _user$project$Textures$texturesUrl,
				_1: {
					ctor: '::',
					_0: kind,
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: _user$project$Textures$texturesUrl,
					_1: {
						ctor: '::',
						_0: 'h-',
						_1: {
							ctor: '::',
							_0: kind,
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$String$concat(
					{
						ctor: '::',
						_0: _user$project$Textures$texturesUrl,
						_1: {
							ctor: '::',
							_0: 's-',
							_1: {
								ctor: '::',
								_0: kind,
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	};
};
var _user$project$Main$init = function () {
	var disaster = _user$project$Main$getTexturePaths(_user$project$Textures$disasterUrl);
	var undug = _user$project$Main$getTexturePaths(_user$project$Textures$undugUrl);
	var food = _user$project$Main$getTexturePaths(_user$project$Textures$foodUrl);
	var queen = _user$project$Main$getTexturePaths(_user$project$Textures$queenUrl);
	var dirt = _user$project$Main$getTexturePaths(_user$project$Textures$dirtUrl);
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		_user$project$Model$initialModel,
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Task$perform, _user$project$Messages$Resize, _elm_lang$window$Window$size),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Platform_Cmd$map,
					_user$project$Messages$Resources,
					_user$project$Game_Resources$loadTextures(
						_elm_lang$core$List$concat(
							{
								ctor: '::',
								_0: dirt,
								_1: {
									ctor: '::',
									_0: queen,
									_1: {
										ctor: '::',
										_0: food,
										_1: {
											ctor: '::',
											_0: undug,
											_1: {
												ctor: '::',
												_0: disaster,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}))),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Random$generate,
						_user$project$Messages$Generated(_user$project$Model$PreGame),
						A2(
							_elm_lang$core$Random$list,
							625,
							A2(_elm_lang$core$Random$float, 0, 1))),
					_1: {ctor: '[]'}
				}
			}
		});
}();
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$window$Window$resizes(_user$project$Messages$Resize),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Sub$map, _user$project$Messages$Keys, _ohanhi$keyboard_extra$Keyboard_Extra$subscriptions),
				_1: {
					ctor: '::',
					_0: _elm_lang$animation_frame$AnimationFrame$diffs(
						function (_p0) {
							return _user$project$Messages$Tick(
								function (dt) {
									return dt / 1000;
								}(_p0));
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$inBounds = F4(
	function (model, speed, x, y) {
		var maxY = _elm_lang$core$Basics$toFloat(
			_elm_lang$core$Dict$size(model.grid)) / 100;
		var maxX = _elm_lang$core$Basics$toFloat(
			_elm_lang$core$Dict$size(model.grid)) / 400;
		var newY = _elm_lang$core$Tuple$second(
			_user$project$Game_TwoD_Camera$getPosition(model.camera)) + (y * speed);
		var checkY = (_elm_lang$core$Native_Utils.cmp(newY, 0 - maxY) > 0) && (_elm_lang$core$Native_Utils.cmp(newY, maxY) < 0);
		var newX = _elm_lang$core$Tuple$first(
			_user$project$Game_TwoD_Camera$getPosition(model.camera)) + (x * speed);
		var checkX = (_elm_lang$core$Native_Utils.cmp(newX, 0 - maxX) > 0) && (_elm_lang$core$Native_Utils.cmp(newX, maxX) < 0);
		return (checkX && checkY) ? true : false;
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = model.state;
		switch (_p1.ctor) {
			case 'PreGame':
				var _p2 = msg;
				switch (_p2.ctor) {
					case 'Resize':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{dimensions: _p2._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'UpdateState':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{state: _p2._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'Resources':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									resources: A2(_user$project$Game_Resources$update, _p2._0, model.resources)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'Generate':
						var floatList = A2(
							_elm_lang$core$Random$list,
							625,
							A2(_elm_lang$core$Random$float, 0, 1));
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: A2(
								_elm_lang$core$Random$generate,
								_user$project$Messages$Generated(_user$project$Model$InGame),
								floatList)
						};
					case 'Generated':
						var _p3 = _p2._1;
						var newGrid = A4(_user$project$Model$createGrid, model, 12, 12, _elm_lang$core$Dict$empty);
						var newFloats = A2(
							_user$project$Model$randomFloatsFromLists,
							A3(
								_user$project$Model$listOfCoords,
								12,
								12,
								{ctor: '[]'}),
							_p3);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{randomFloats: newFloats, floatsList: _p3, grid: newGrid, state: _p2._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'InGame':
				var _p4 = msg;
				switch (_p4.ctor) {
					case 'NoMessageYet':
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					case 'Resize':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{dimensions: _p4._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'MouseMove':
						var _p5 = _p4._0;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{mPosX: _p5.x, mPosY: _p5.y}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'Resources':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									resources: A2(_user$project$Game_Resources$update, _p4._0, model.resources)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'Keys':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									pressedKeys: A2(_ohanhi$keyboard_extra$Keyboard_Extra$update, _p4._0, model.pressedKeys)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'MouseDown':
						var _p7 = _p4._0;
						var h = model.dimensions.height;
						var w = model.dimensions.width;
						var y = _elm_lang$core$Basics$round(_p7.y);
						var x = _elm_lang$core$Basics$round(_p7.x);
						var mousePos = A3(
							_user$project$Game_TwoD_Camera$viewportToGameCoordinates,
							model.camera,
							{ctor: '_Tuple2', _0: w, _1: h},
							{ctor: '_Tuple2', _0: x, _1: y});
						var normalX = _elm_lang$core$Basics$floor(
							_elm_lang$core$Tuple$first(mousePos));
						var normalY = _elm_lang$core$Basics$floor(
							_elm_lang$core$Tuple$second(mousePos));
						var tile = function () {
							var _p6 = A3(_user$project$Tile$getTile, model.grid, normalX, normalY);
							if (_p6.ctor === 'Just') {
								return _elm_lang$core$Maybe$Just(_p6._0);
							} else {
								return model.selected;
							}
						}();
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{mPosX: _p7.x, mPosY: _p7.y, selected: tile}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'Tick':
						var _p8 = _p4._0;
						var h = model.dimensions.height;
						var w = model.dimensions.width;
						var width = _elm_lang$core$Tuple$first(
							A2(
								_user$project$Game_TwoD_Camera$getViewSize,
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Basics$toFloat(w),
									_1: _elm_lang$core$Basics$toFloat(h)
								},
								model.camera));
						var camSpeed = _p8 * (width / 4);
						var arrows = _ohanhi$keyboard_extra$Keyboard_Extra$wasd(model.pressedKeys);
						var x = _elm_lang$core$Basics$toFloat(arrows.x);
						var y = _elm_lang$core$Basics$toFloat(arrows.y);
						var newCamera = A4(_user$project$Main$inBounds, model, camSpeed, x, y) ? A2(
							_user$project$Game_TwoD_Camera$moveBy,
							{ctor: '_Tuple2', _0: x * camSpeed, _1: y * camSpeed},
							model.camera) : model.camera;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{time: _p8 + model.time, camera: newCamera}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'Collect':
						var selY = _user$project$UnMaybe$unMaybeInt(
							_user$project$Tile$getY(model.selected));
						var selX = _user$project$UnMaybe$unMaybeInt(
							_user$project$Tile$getX(model.selected));
						var grid = A3(
							_elm_lang$core$Dict$update,
							{ctor: '_Tuple2', _0: selX, _1: selY},
							_user$project$Tile$updateToDirt,
							model.grid);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									ants: A2(_user$project$Ants$increaseFood, model.ants, 200),
									grid: grid,
									selected: A2(
										_elm_lang$core$Dict$get,
										{ctor: '_Tuple2', _0: selX, _1: selY},
										grid)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'UpdateState':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{state: _p4._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'Dig':
						var undugTiles = model.undugTiles - 1;
						var won = _elm_lang$core$Native_Utils.cmp(undugTiles, 0) < 1;
						var ants = _elm_lang$core$Native_Utils.eq(
							_user$project$Tile$getKind(model.selected),
							_user$project$Tile$Disaster) ? A2(_user$project$Ants$decreaseFood, model.ants, 100) : A2(_user$project$Ants$decreaseFood, model.ants, 40);
						var state = ((_elm_lang$core$Native_Utils.cmp(ants.number, 0) < 1) || (_elm_lang$core$Native_Utils.cmp(undugTiles, 0) < 1)) ? _user$project$Model$PostGame : _user$project$Model$InGame;
						var selY = _user$project$UnMaybe$unMaybeInt(
							_user$project$Tile$getY(model.selected));
						var selX = _user$project$UnMaybe$unMaybeInt(
							_user$project$Tile$getX(model.selected));
						var grid = A3(
							_elm_lang$core$Dict$update,
							{ctor: '_Tuple2', _0: selX, _1: selY},
							_user$project$Tile$digTile,
							model.grid);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									ants: ants,
									grid: grid,
									state: state,
									selected: A2(
										_elm_lang$core$Dict$get,
										{ctor: '_Tuple2', _0: selX, _1: selY},
										grid),
									undugTiles: undugTiles,
									won: won
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				var _p9 = msg;
				switch (_p9.ctor) {
					case 'Resize':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{dimensions: _p9._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'UpdateState':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{state: _p9._0, ants: _user$project$Ants$initialAnts}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$View$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
